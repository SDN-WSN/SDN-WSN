#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'RoutingMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 52

# The Active Message type associated with this message.
AM_TYPE = 7

class RoutingMsg(tinyos.message.Message.Message):
    # Create a new RoutingMsg of size 52.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=52):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <RoutingMsg> \n"
        try:
            s += "  [nodeid=0x%x]\n" % (self.get_nodeid())
        except:
            pass
        try:
            s += "  [NeighborAction.USED=";
            for i in range(0, 10):
                s += "0x%x " % (self.getElement_NeighborAction_USED(i) & 0xff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [NeighborAction.NeighborNode=";
            for i in range(0, 10):
                s += "0x%x " % (self.getElement_NeighborAction_NeighborNode(i) & 0xffff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [NeighborAction.Action=";
            for i in range(0, 10):
                s += "0x%x " % (self.getElement_NeighborAction_Action(i) & 0xffff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: nodeid
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'nodeid' is signed (False).
    #
    def isSigned_nodeid(self):
        return False
    
    #
    # Return whether the field 'nodeid' is an array (False).
    #
    def isArray_nodeid(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'nodeid'
    #
    def offset_nodeid(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'nodeid'
    #
    def offsetBits_nodeid(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'nodeid'
    #
    def get_nodeid(self):
        return self.getUIntElement(self.offsetBits_nodeid(), 16, 1)
    
    #
    # Set the value of the field 'nodeid'
    #
    def set_nodeid(self, value):
        self.setUIntElement(self.offsetBits_nodeid(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'nodeid'
    #
    def size_nodeid(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'nodeid'
    #
    def sizeBits_nodeid(self):
        return 16
    
    #
    # Accessor methods for field: NeighborAction.USED
    #   Field type: short[]
    #   Offset (bits): 0
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'NeighborAction.USED' is signed (False).
    #
    def isSigned_NeighborAction_USED(self):
        return False
    
    #
    # Return whether the field 'NeighborAction.USED' is an array (True).
    #
    def isArray_NeighborAction_USED(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'NeighborAction.USED'
    #
    def offset_NeighborAction_USED(self, index1):
        offset = 0
        if index1 < 0 or index1 >= 10:
            raise IndexError
        offset += 16 + index1 * 40
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'NeighborAction.USED'
    #
    def offsetBits_NeighborAction_USED(self, index1):
        offset = 0
        if index1 < 0 or index1 >= 10:
            raise IndexError
        offset += 16 + index1 * 40
        return offset
    
    #
    # Return the entire array 'NeighborAction.USED' as a short[]
    #
    def get_NeighborAction_USED(self):
        tmp = [None]*10
        for index0 in range (0, self.numElements_NeighborAction_USED(0)):
                tmp[index0] = self.getElement_NeighborAction_USED(index0)
        return tmp
    
    #
    # Set the contents of the array 'NeighborAction.USED' from the given short[]
    #
    def set_NeighborAction_USED(self, value):
        for index0 in range(0, len(value)):
            self.setElement_NeighborAction_USED(index0, value[index0])

    #
    # Return an element (as a short) of the array 'NeighborAction.USED'
    #
    def getElement_NeighborAction_USED(self, index1):
        return self.getUIntElement(self.offsetBits_NeighborAction_USED(index1), 8, 1)
    
    #
    # Set an element of the array 'NeighborAction.USED'
    #
    def setElement_NeighborAction_USED(self, index1, value):
        self.setUIntElement(self.offsetBits_NeighborAction_USED(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'NeighborAction.USED'
    #
    def totalSize_NeighborAction_USED(self):
        return (400 / 8)
    
    #
    # Return the total size, in bits, of the array 'NeighborAction.USED'
    #
    def totalSizeBits_NeighborAction_USED(self):
        return 400
    
    #
    # Return the size, in bytes, of each element of the array 'NeighborAction.USED'
    #
    def elementSize_NeighborAction_USED(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'NeighborAction.USED'
    #
    def elementSizeBits_NeighborAction_USED(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'NeighborAction.USED'
    #
    def numDimensions_NeighborAction_USED(self):
        return 1
    
    #
    # Return the number of elements in the array 'NeighborAction.USED'
    #
    def numElements_NeighborAction_USED():
        return 10
    
    #
    # Return the number of elements in the array 'NeighborAction.USED'
    # for the given dimension.
    #
    def numElements_NeighborAction_USED(self, dimension):
        array_dims = [ 10,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'NeighborAction.USED' with a String
    #
    def setString_NeighborAction_USED(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_NeighborAction_USED(i, ord(s[i]));
         self.setElement_NeighborAction_USED(l, 0) #null terminate
    
    #
    # Read the array 'NeighborAction.USED' as a String
    #
    def getString_NeighborAction_USED(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_NeighborAction_USED(i) == chr(0):
                break
            carr += self.getElement_NeighborAction_USED(i)
        return carr
    
    #
    # Accessor methods for field: NeighborAction.NeighborNode
    #   Field type: int[]
    #   Offset (bits): 8
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'NeighborAction.NeighborNode' is signed (False).
    #
    def isSigned_NeighborAction_NeighborNode(self):
        return False
    
    #
    # Return whether the field 'NeighborAction.NeighborNode' is an array (True).
    #
    def isArray_NeighborAction_NeighborNode(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'NeighborAction.NeighborNode'
    #
    def offset_NeighborAction_NeighborNode(self, index1):
        offset = 8
        if index1 < 0 or index1 >= 10:
            raise IndexError
        offset += 16 + index1 * 40
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'NeighborAction.NeighborNode'
    #
    def offsetBits_NeighborAction_NeighborNode(self, index1):
        offset = 8
        if index1 < 0 or index1 >= 10:
            raise IndexError
        offset += 16 + index1 * 40
        return offset
    
    #
    # Return the entire array 'NeighborAction.NeighborNode' as a int[]
    #
    def get_NeighborAction_NeighborNode(self):
        tmp = [None]*10
        for index0 in range (0, self.numElements_NeighborAction_NeighborNode(0)):
                tmp[index0] = self.getElement_NeighborAction_NeighborNode(index0)
        return tmp
    
    #
    # Set the contents of the array 'NeighborAction.NeighborNode' from the given int[]
    #
    def set_NeighborAction_NeighborNode(self, value):
        for index0 in range(0, len(value)):
            self.setElement_NeighborAction_NeighborNode(index0, value[index0])

    #
    # Return an element (as a int) of the array 'NeighborAction.NeighborNode'
    #
    def getElement_NeighborAction_NeighborNode(self, index1):
        return self.getUIntElement(self.offsetBits_NeighborAction_NeighborNode(index1), 16, 1)
    
    #
    # Set an element of the array 'NeighborAction.NeighborNode'
    #
    def setElement_NeighborAction_NeighborNode(self, index1, value):
        self.setUIntElement(self.offsetBits_NeighborAction_NeighborNode(index1), 16, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'NeighborAction.NeighborNode'
    #
    def totalSize_NeighborAction_NeighborNode(self):
        return (400 / 8)
    
    #
    # Return the total size, in bits, of the array 'NeighborAction.NeighborNode'
    #
    def totalSizeBits_NeighborAction_NeighborNode(self):
        return 400
    
    #
    # Return the size, in bytes, of each element of the array 'NeighborAction.NeighborNode'
    #
    def elementSize_NeighborAction_NeighborNode(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'NeighborAction.NeighborNode'
    #
    def elementSizeBits_NeighborAction_NeighborNode(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'NeighborAction.NeighborNode'
    #
    def numDimensions_NeighborAction_NeighborNode(self):
        return 1
    
    #
    # Return the number of elements in the array 'NeighborAction.NeighborNode'
    #
    def numElements_NeighborAction_NeighborNode():
        return 10
    
    #
    # Return the number of elements in the array 'NeighborAction.NeighborNode'
    # for the given dimension.
    #
    def numElements_NeighborAction_NeighborNode(self, dimension):
        array_dims = [ 10,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Accessor methods for field: NeighborAction.Action
    #   Field type: int[]
    #   Offset (bits): 24
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'NeighborAction.Action' is signed (False).
    #
    def isSigned_NeighborAction_Action(self):
        return False
    
    #
    # Return whether the field 'NeighborAction.Action' is an array (True).
    #
    def isArray_NeighborAction_Action(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'NeighborAction.Action'
    #
    def offset_NeighborAction_Action(self, index1):
        offset = 24
        if index1 < 0 or index1 >= 10:
            raise IndexError
        offset += 16 + index1 * 40
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'NeighborAction.Action'
    #
    def offsetBits_NeighborAction_Action(self, index1):
        offset = 24
        if index1 < 0 or index1 >= 10:
            raise IndexError
        offset += 16 + index1 * 40
        return offset
    
    #
    # Return the entire array 'NeighborAction.Action' as a int[]
    #
    def get_NeighborAction_Action(self):
        tmp = [None]*10
        for index0 in range (0, self.numElements_NeighborAction_Action(0)):
                tmp[index0] = self.getElement_NeighborAction_Action(index0)
        return tmp
    
    #
    # Set the contents of the array 'NeighborAction.Action' from the given int[]
    #
    def set_NeighborAction_Action(self, value):
        for index0 in range(0, len(value)):
            self.setElement_NeighborAction_Action(index0, value[index0])

    #
    # Return an element (as a int) of the array 'NeighborAction.Action'
    #
    def getElement_NeighborAction_Action(self, index1):
        return self.getUIntElement(self.offsetBits_NeighborAction_Action(index1), 16, 1)
    
    #
    # Set an element of the array 'NeighborAction.Action'
    #
    def setElement_NeighborAction_Action(self, index1, value):
        self.setUIntElement(self.offsetBits_NeighborAction_Action(index1), 16, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'NeighborAction.Action'
    #
    def totalSize_NeighborAction_Action(self):
        return (400 / 8)
    
    #
    # Return the total size, in bits, of the array 'NeighborAction.Action'
    #
    def totalSizeBits_NeighborAction_Action(self):
        return 400
    
    #
    # Return the size, in bytes, of each element of the array 'NeighborAction.Action'
    #
    def elementSize_NeighborAction_Action(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'NeighborAction.Action'
    #
    def elementSizeBits_NeighborAction_Action(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'NeighborAction.Action'
    #
    def numDimensions_NeighborAction_Action(self):
        return 1
    
    #
    # Return the number of elements in the array 'NeighborAction.Action'
    #
    def numElements_NeighborAction_Action():
        return 10
    
    #
    # Return the number of elements in the array 'NeighborAction.Action'
    # for the given dimension.
    #
    def numElements_NeighborAction_Action(self, dimension):
        array_dims = [ 10,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
