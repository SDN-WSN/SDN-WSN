/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'InitializationMsg'
 * message type.
 */

public class InitializationMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 10;

    /** Create a new InitializationMsg of size 8. */
    public InitializationMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new InitializationMsg of the given data_length. */
    public InitializationMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InitializationMsg with the given data_length
     * and base offset.
     */
    public InitializationMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InitializationMsg using the given byte array
     * as backing store.
     */
    public InitializationMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InitializationMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public InitializationMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InitializationMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public InitializationMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InitializationMsg embedded in the given message
     * at the given base offset.
     */
    public InitializationMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InitializationMsg embedded in the given message
     * at the given base offset and length.
     */
    public InitializationMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <InitializationMsg> \n";
      try {
        s += "  [UX=0x"+Long.toHexString(get_UX())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [UY=0x"+Long.toHexString(get_UY())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ReplenishmentRate=0x"+Long.toHexString(get_ReplenishmentRate())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Type=0x"+Long.toHexString(get_Type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: UX
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'UX' is signed (false).
     */
    public static boolean isSigned_UX() {
        return false;
    }

    /**
     * Return whether the field 'UX' is an array (false).
     */
    public static boolean isArray_UX() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'UX'
     */
    public static int offset_UX() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'UX'
     */
    public static int offsetBits_UX() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'UX'
     */
    public int get_UX() {
        return (int)getUIntBEElement(offsetBits_UX(), 16);
    }

    /**
     * Set the value of the field 'UX'
     */
    public void set_UX(int value) {
        setUIntBEElement(offsetBits_UX(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'UX'
     */
    public static int size_UX() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'UX'
     */
    public static int sizeBits_UX() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: UY
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'UY' is signed (false).
     */
    public static boolean isSigned_UY() {
        return false;
    }

    /**
     * Return whether the field 'UY' is an array (false).
     */
    public static boolean isArray_UY() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'UY'
     */
    public static int offset_UY() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'UY'
     */
    public static int offsetBits_UY() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'UY'
     */
    public int get_UY() {
        return (int)getUIntBEElement(offsetBits_UY(), 16);
    }

    /**
     * Set the value of the field 'UY'
     */
    public void set_UY(int value) {
        setUIntBEElement(offsetBits_UY(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'UY'
     */
    public static int size_UY() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'UY'
     */
    public static int sizeBits_UY() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ReplenishmentRate
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ReplenishmentRate' is signed (false).
     */
    public static boolean isSigned_ReplenishmentRate() {
        return false;
    }

    /**
     * Return whether the field 'ReplenishmentRate' is an array (false).
     */
    public static boolean isArray_ReplenishmentRate() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ReplenishmentRate'
     */
    public static int offset_ReplenishmentRate() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ReplenishmentRate'
     */
    public static int offsetBits_ReplenishmentRate() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'ReplenishmentRate'
     */
    public int get_ReplenishmentRate() {
        return (int)getUIntBEElement(offsetBits_ReplenishmentRate(), 16);
    }

    /**
     * Set the value of the field 'ReplenishmentRate'
     */
    public void set_ReplenishmentRate(int value) {
        setUIntBEElement(offsetBits_ReplenishmentRate(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ReplenishmentRate'
     */
    public static int size_ReplenishmentRate() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ReplenishmentRate'
     */
    public static int sizeBits_ReplenishmentRate() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Type
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Type' is signed (false).
     */
    public static boolean isSigned_Type() {
        return false;
    }

    /**
     * Return whether the field 'Type' is an array (false).
     */
    public static boolean isArray_Type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Type'
     */
    public static int offset_Type() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Type'
     */
    public static int offsetBits_Type() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'Type'
     */
    public int get_Type() {
        return (int)getUIntBEElement(offsetBits_Type(), 16);
    }

    /**
     * Set the value of the field 'Type'
     */
    public void set_Type(int value) {
        setUIntBEElement(offsetBits_Type(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Type'
     */
    public static int size_Type() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Type'
     */
    public static int sizeBits_Type() {
        return 16;
    }

}
